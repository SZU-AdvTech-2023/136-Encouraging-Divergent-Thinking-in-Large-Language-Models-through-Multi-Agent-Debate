{
    "source": "",
    "reference": "",
    "base_SQL_query": "",
    "base_prompt":"The SQL skeleton refers to the parts of a query that retain SQL keywords, such as \"SELECT,\" \"FROM,\" \"WHERE,\" \"JOIN,\" \"ORDER BY,\" etc. All other fields are represented by [mask]. Find the sql query skeleton used for generating SQL queries for each question by imitating following example. Strictly stipulate that you cannot generate any additional information except for sql skeleton. Following is some tables in database, the name of database is computer_student: [[SEP]] schema: || course: course_id (integer) (null)(unique id number identifying courses) | courseLevel (text) (null) (primary key)(course level) (some values:['Level_500', 'Level_300', 'Level_400'])|| || taughtBy: course_id (integer) (null) (foreign key references course(course_id))(the identification number identifying each course) | p_id (integer) (null) (primary key) (foreign key references person(p_id),)(the identification number identifying each person) || [[SEP]] Question: Provide the ID of professors who are teaching high-level or harder undergraduate course? Note: ID of professors refers to taughtBy.p_id; high-level or harder undergraduate course refers to courseLevel = 'Level_400'. Tables likely to be used: [taughtBy, course] Columns likely to be used: [p_id, courseLevel, course_id] Let's think step by step. According to above infomation we can notice that: In question, \"Provide the ID of professors who are teaching high-level or harder undergraduate course?\", 1. We need to provide the ID of the professor, so the SELECT statement is included in the SQL_query skeleton. 2. We need to use table taughtBy and course, so the FROM statement is included in the SQL_query skeleton. 3. We need to know both the professor and course information and use two tables, so the JOIN statement is included in the SQL_query framework. 4. The condition \"courseLevel = 'Level_400'\" is included in the question, so the WHERE statement is included in the SQL_query framework. Based on the reasoning process mentioned above: SQL SKELETON: SELECT [mask] FROM [mask] INNER JOIN [mask] WHERE [mask] \nand I need you to remember the tips, and do not make same mistakes.\n 1. Gold SQL: select A from B group by A order by count ( * ) desc limit 1; \n Notice that the Gold SQL doesn't select COUNT(*) because the question only wants to know the A and the number should be only used in ORDER BY clause, there are many questions asks in this way, and I need you to remember this in the the following questions. \n 2. Don't use \"IN\", \"OR\", \"LEFT JOIN\" as it might cause extra results, use \"INTERSECT\" or \"EXCEPT\" instead, and remember to use \"DISTINCT\" or \"LIMIT\" when necessary.",
    "player_meta_prompt": "You are a debater. Hello and welcome to the SQL competition, which will be conducted in a debate format. It's not necessary to fully agree with each other's perspectives, as our objective is to find the correct SQL_query.\nThe debate topic is stated as follows:\n \"##source##\"",
    "moderator_meta_prompt": "You are a moderator. There will be two debaters involved in a SQL_query debate competition. They will present their SQL_query and discuss their perspectives on the correctSQL_query of the promblem: \"##source##\". At the end of each round, you will evaluate the SQL_query candidates based on the following criteria:\n1. Accuracy: The degree to which the SQL_query captures the original meaning of the source text.\n2. Gold SQL: select A from B group by A order by count ( * ) desc limit 1; \n Notice that the Gold SQL doesn't select COUNT(*) because the question only wants to know the A and the number should be only used in ORDER BY clause, there are many questions asks in this way, and I need you to remember this in the the following questions. \n 3. Don't use \"IN\", \"OR\", \"LEFT JOIN\" as it might cause extra results, use \"INTERSECT\" or \"EXCEPT\" instead, and remember to use \"DISTINCT\" or \"LIMIT\" when necessary.",
    "affirmative_prompt": "You think the correct SQL_query is: ##base_SQL_query## Restate the SQL_query and provide your reasons.",
    "negative_prompt": "##aff_ans##\n\nYou disagree with my SQL_query. Provide your SQL_query and reasons.",
    "moderator_prompt": "Now the ##round## round of debate for both sides has ended.\n\nAffirmative side arguing:\n##aff_ans##\n\nNegative side arguing: ##neg_ans##\n\nYou, as the moderator, will evaluate both sides' SQL_query and determine if there is a clear preference for a SQL_query candidate. If so, please summarize your reasons for supporting affirmative/negative side and give the final SQL_query that you think is correct, and the debate will conclude. If not, the debate will continue to the next round. Now please output your answer in json format, with the format as follows: {\"Whether there is a preference\": \"Yes or No\", \"Supported Side\": \"Affirmative or Negative\", \"Reason\": \"\", \"debate_SQL_query\": \"\"}. Please strictly output in JSON format, do not output irrelevant content.",
    "judge_prompt_last1": "Affirmative side arguing: ##aff_ans##\n\nNegative side arguing: ##neg_ans##\n\nNow, what SQL_query candidates do we have? Present them without reasons.",
    "judge_prompt_last2": "Therefore, what is the correct ##tgt_lng## SQL_query of the following ##src_lng## text: \"##source##\". Please summarize your reasons and give the final SQL_query that you think is correct. Now please output your answer in json format, with the format as follows: {\"Reason\": \"\", \"debate_SQL_query\": \"\"}. Please strictly output in JSON format, do not output irrelevant content.",
    "debate_prompt": "##oppo_ans##\n\nDo you agree with my perspective? Please provide your reasons and SQL_query."
}